# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant::Config.run do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  #the base box we're using
  box = "ubuntu-12.10"
  
    #Puppet master
  config.vm.define :master do |master_config|
	master_config.vm.box = "ubuntu-12.10"
	master_config.vm.host_name = "master"
	master_config.vm.network :hostonly, "10.0.1.20"#:adapter=> 1
	master_config.vm.customize ["modifyvm", :id, "--memory", 1024]
	#share the Puppet modules and manifests folders
	#master_config.ssh.port = 22
	master_config.vm.share_folder "v-data", "/etc/puppet/modules", "modules", :nfs=> true
	master_config.vm.share_folder "v-data2", "/etc/puppet/manifests", "manifests", :nfs=> true
	master_config.vm.host_name = "master"
  end	

    #gluster storage node that will run a puppet agent
  config.vm.define :gluster1 do |gluster1_config|
  	gluster1_config.vm.box = "ubuntu-12.10"
  	gluster1_config.vm.host_name = "gluster1"
	gluster1_config.vm.network :hostonly, "10.0.1.21"#:adapter=> 1
	gluster1_config.vm.customize ["modifyvm", :id, "--memory", 512]
	gluster1_config.vm.host_name = "gluster1"
  end	
  
  
    #gluster storage node that will run a puppet agent
  config.vm.define :gluster2 do |gluster2_config|
  	gluster2_config.vm.box = "ubuntu-12.10"
  	gluster2_config.vm.host_name = "gluster2"
	gluster2_config.vm.network :hostonly, "10.0.1.22"#:adapter=> 1
	gluster2_config.vm.customize ["modifyvm", :id, "--memory", 512]
	gluster2_config.vm.host_name = "gluster2"
  end	
  
    #gluster storage node that will run a puppet agent
  config.vm.define :gluster3 do |gluster3_config|
  	gluster3_config.vm.box = "ubuntu-12.10"
  	gluster3_config.vm.host_name = "gluster3"
	gluster3_config.vm.network :hostonly, "10.0.1.23"#:adapter=> 1
	gluster3_config.vm.customize ["modifyvm", :id, "--memory", 512]
	gluster3_config.vm.host_name = "gluster3"
  end	
  
    #gluster storage node that will run a puppet agent
  config.vm.define :gluster4 do |gluster4_config|
  	gluster4_config.vm.box = "ubuntu-12.10"
  	gluster4_config.vm.host_name = "gluster4"
	gluster4_config.vm.network :hostonly, "10.0.1.24"#:adapter=> 1
	gluster4_config.vm.customize ["modifyvm", :id, "--memory", 512]
	gluster4_config.vm.host_name = "gluster4"
  end	
  	 
  # Every Vagrant virtual environment requires a box to build off of.


  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Boot with a GUI so you can see the screen. (Default is headless)
  # config.vm.boot_mode = :gui

  # Assign this VM to a host-only network IP, allowing you to access it
  # via the IP. Host-only networks can talk to the host machine as well as
  # any other machines on the same network, but cannot be accessed (through this
  # network interface) by any external networks.
  # config.vm.network :hostonly, "192.168.33.10"

  # Assign this VM to a bridged network, allowing you to connect directly to a
  # network using the host's network device. This makes the VM appear as another
  # physical device on your network.
  #config.vm.network :hostonly, "10.0.0.90"

  # Forward a port from the guest to the host, which allows for outside
  # computers to access the VM, whereas host only networking does not.
  # config.vm.forward_port 80, 8080

  # Share an additional folder to the guest VM. The first argument is
  # an identifier, the second is the path on the guest to mount the
  # folder, and the third is the path on the host to the actual folder.
  # config.vm.share_folder "v-data", "/vagrant_data", "../data"

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file ubuntu12.10.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #               Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "ubuntu12.10.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding 
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # IF you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
end
