; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/var/log/riemann/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

;Start a Graphite server on the usual port for Carbon:
(graphite-server :host "10.0.1.191" :port 2003 :protocol :tcp)

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

;Example metric:
; #riemann.codec.Event{:host nil, :service collectd.collectd1_local.df-run.df_complex-reserved, :state nil, :description nil, :metric 0.0, :tags nil, :time 1402720236, :ttl nil}

(let [index (index)]
  ; Inbound events will be passed to the functions that come after (streams...
  (streams
    ;This is one function. Index all events immediately.
    index
    
    ;This is where(), another function.
    ;In this specific example, if the :service field of the event starts with 'collectd.'...
    (where (service #"collectd.")
      ;...log it to the log file so we know we received it. The #"collectd." part is a Clojure regular expression.
      ;If the where function evaluates to true (if the regex matches), then pass the event to the info() function.
      ;Thie info() function logs the string that's in the service field along with the "found a..." string after it.
      ;It gets sent to the log file defined above in "logging/init..."
      #(info (:service %) "found a collectd event!"))
    
    ;Just for debugging, log all events to the log file specified above in "(logging/init...."
    #(info %))
    ))