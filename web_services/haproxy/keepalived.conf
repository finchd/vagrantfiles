vrrp_script check_haproxy {
  #See if HAProxy is running. Even though the parameter is called 'script', it can be any shell command.
  script "killall -0 haproxy" 
  #Run the above script every 2 seconds:
  interval 2
  #If the script succeeds (if HAProxy is actually running), add 2 to the priority. This makes sure that if HAProxy is running, and
  #this is the master node, that this node will keep being used for things that want to reach the virtual IP. If it doesn't but the
  #check succeeds on the backup node, the backup node will take over since its priority is initially only 1 lower than the
  #master's priority and it gets 2 added to its priority if the check script succeeds on it:
  weight 2
}

vrrp_instance VI_1 {
  #The interface we're monitoring:
  interface eth1
  state MASTER
  #An ID for this IP address/route. This has to be the same across both nodes:
  virtual_router_id 51
  #This value should be higher on the master node than on the backup node:
  priority 101
  #The virtual IP address the 2 nodes share:
  virtual_ipaddress { 
    10.0.1.185 dev eth1
  }
  #The script we use to see if this node should be in use; it's defined above, checking to see if HAProxy is running:
  track_script {
    check_haproxy
  }
}